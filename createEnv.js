import * as fs from 'fs';
import dotenv from 'dotenv';

// Load environment variables from .env
dotenv.config();

// ============================================================================
// CREATE MPC NODE ENVIRONMENT FILES
// ============================================================================

console.log('üîß Creating MPC Node Environment Files');
console.log('======================================\n');

// Check if deployment.json exists
if (!fs.existsSync('deployment.json')) {
    console.error('‚ùå deployment.json not found');
    console.error('   Please run deployment first: node deploy.js');
    process.exit(1);
}

// Load deployment info
const deployment = JSON.parse(fs.readFileSync('deployment.json', 'utf8'));

console.log('üìã Deployment Info:');
console.log(`   Contract Address: ${deployment.contractAddress}`);
console.log(`   Code Hash: ${deployment.codeHash}`);
console.log(`   Chain ID: ${deployment.chainId}`);
console.log('');

// Number of nodes to create
const numNodes = parseInt(process.env.NUM_NODES || '3');

// Get RPC URL from env or use default
const rpcUrl = process.env.RPC_URL || 'https://lcd.erth.network';

// Check if we have mnemonics from .env file
const mnemonics = [];
for (let i = 1; i <= numNodes; i++) {
    const mnemonic = process.env[`NODE${i}_MNEMONIC`];
    if (mnemonic) {
        mnemonics.push(mnemonic);
    }
}

if (mnemonics.length === 0) {
    console.log('‚ö†Ô∏è  No mnemonics found in .env file');
    console.log('   Using placeholder mnemonics (update these before running!)');
    console.log('');
} else {
    console.log(`‚úì Found ${mnemonics.length} mnemonics in .env file`);
    console.log('');
}

// Create .env file for each node
for (let i = 1; i <= numNodes; i++) {
    const nodeDir = `mpc-node`;
    const envFile = `${nodeDir}/.env.node${i}`;

    const mnemonic = mnemonics[i - 1] ||
        'grant rice replace explain federal release fix clever romance raise often wild panic costume badge start supreme electric';

    const envContent = `# MPC Node ${i} Configuration
# Auto-generated by createEnv.js

# Node identifier
NODE_ID=${i}

# Secret Network wallet mnemonic for this node
# ‚ö†Ô∏è  IMPORTANT: Replace with your own mnemonic!
MNEMONIC=${mnemonic}

# MPC Contract details (from deployment)
CONTRACT_ADDRESS=${deployment.contractAddress}
CONTRACT_CODE_HASH=${deployment.codeHash}

# Network configuration
CHAIN_ID=${deployment.chainId}
RPC_URL=${rpcUrl}
`;

    fs.writeFileSync(envFile, envContent);
    console.log(`‚úì Created ${envFile}`);
}

console.log('');
console.log('‚úÖ Environment files created!');
console.log('');
console.log('üìã Next Steps:');
console.log('');
console.log(`1. Review and update mnemonics in mpc-node/.env.node1, .env.node2, .env.node3`);
console.log('');
console.log('2. Start nodes in separate terminals:');
for (let i = 1; i <= numNodes; i++) {
    console.log(`   Terminal ${i}: cd mpc-node && NODE_ID=${i} npm start`);
}
console.log('');
console.log('   Or use the environment files directly:');
for (let i = 1; i <= numNodes; i++) {
    console.log(`   Terminal ${i}: cd mpc-node && cp .env.node${i} .env && npm start`);
}
console.log('');
